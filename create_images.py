import numpy as np
import matplotlib.pyplot as plt
import os
from PIL import Image
import bottleneck as bn
from sklearn.model_selection import train_test_split
import shutil
from tqdm import tqdm
width = 1024

def main():
    filenames = []
    labels = []
    arr = []
    #Walk the directory in which the MalDroid apk files are stored
    for root, dirs, files in os.walk('MalDroid/data'):
        for name in files:
            filenames.append(os.path.join(root, name))
            labels.append(root[root.find("\\")+1:])
            arr.append(name)
        
    filenames = np.array(filenames)
    labels = np.array(labels)
    arr = np.array(arr)
    
    idx = np.arange(len(filenames))
    idx_train, idx_test = train_test_split(idx, test_size=0.33, random_state=42)
    filenames_train = filenames[idx_train]
    filenames_test = filenames[idx_test]
    labels_train = labels[idx_train]
    labels_test = labels[idx_test]
    arr_train = arr[idx_train]
    arr_test = arr[idx_test]

    print("Train Dataset")
    for i in tqdm(range(len(filenames_train))):
        data = open(filenames_train[i], "r")
        data = np.fromfile(data, dtype=np.uint8)

        array = np.zeros(len(data) + width - len(data) % width)
        count_array = np.zeros(len(data) + width - len(data) % width)
        ma_array = np.zeros(len(data) + width - len(data) % width)

        array[0:len(data)] = data

        #Compute entropy for each byte
        counts = np.unique(data, return_counts=True)[1] / len(data)
        if len(counts) < 256:
            counts = np.zeros(256).astype(np.float32)
            counts[np.unique(data)] = np.unique(data, return_counts=True)[1] / len(data) 
        count_array[0:len(data)] = -counts[data] * np.log2(counts[data])

        # convert values to 0 - 255 int8 format
        count_array[0:len(data)] = (count_array[0:len(data)] * 255 / np.max(count_array[0:len(data)])).astype('uint8')

        #use a moving average for the third channel
        if(len(data)) > 256:
            ma_array = bn.move_mean(array, window=256, min_count=1)

        img = np.zeros((len(array)//width,width,3))
        ch1 = array.reshape((len(array)//width,width))
        ch2 = count_array.reshape((len(count_array)//width,width))
        ch3 = ma_array.reshape((len(ma_array)//width,width))
        img[:,:,0] = ch1
        img[:,:,1] = ch2
        img[:,:,2] = ch3
        img = img.astype(np.uint8)

        im = Image.fromarray(img)
        im = im.resize((512, 512), Image.ANTIALIAS)

        if not os.path.exists('MalDroid_Images/Train/'+labels_train[i]):
            os.makedirs('MalDroid_Images/Train/'+labels_train[i])

        im.save("MalDroid_Images/Train/"+labels_train[i]+"/{}.png".format(arr_train[i]),"PNG")
        
    print("Test Dataset")
    for i in tqdm(range(len(filenames_test))):
        data = open(filenames_test[i], "r")
        data = np.fromfile(data, dtype=np.uint8)

        array = np.zeros(len(data) + width - len(data) % width)
        count_array = np.zeros(len(data) + width - len(data) % width)
        ma_array = np.zeros(len(data) + width - len(data) % width)

        array[0:len(data)] = data

        #Compute entropy for each byte
        counts = np.unique(data, return_counts=True)[1] / len(data)
        if len(counts) < 256:
            counts = np.zeros(256).astype(np.float32)
            counts[np.unique(data)] = np.unique(data, return_counts=True)[1] / len(data) 
        count_array[0:len(data)] = -counts[data] * np.log2(counts[data])

        # convert values to 0 - 255 int8 format
        count_array[0:len(data)] = (count_array[0:len(data)] * 255 / np.max(count_array[0:len(data)])).astype('uint8')

        #use a moving average for the third channel
        if(len(data)) > 256:
            ma_array = bn.move_mean(array, window=256, min_count=1)

        img = np.zeros((len(array)//width,width,3))
        ch1 = array.reshape((len(array)//width,width))
        ch2 = count_array.reshape((len(count_array)//width,width))
        ch3 = ma_array.reshape((len(ma_array)//width,width))
        img[:,:,0] = ch1
        img[:,:,1] = ch2
        img[:,:,2] = ch3
        img = img.astype(np.uint8)

        im = Image.fromarray(img)
        im = im.resize((512, 512), Image.ANTIALIAS)

        if not os.path.exists('MalDroid_Images/Test/'+labels_test[i]):
            os.makedirs('MalDroid_Images/Test/'+labels_test[i])

        im.save("MalDroid_Images/Test/"+labels_test[i]+"/{}.png".format(arr_test[i]),"PNG")

if __name__ == "__main__":
    main()